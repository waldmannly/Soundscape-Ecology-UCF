parameters <- c(a = -7/3,b = -5,c = 40)
state <- c(X = 2,Y = 3,Z = 5)
Lorenz<-function(t, state, parameters) {
with(as.list(c(state, parameters)),{
# rate of change
dX <- a*X + Y*Z
dY <- b * (Y-Z)
dZ <- -X*Y + c*Y - Z# return the rate of change
list(c(dX, dY, dZ))
}) # end with(as.list ...
}
times <- seq(0, 12, by = 0.001)
library(deSolve)
out <- ode(y = state, times = times, func = Lorenz, parms = parameters)
head(out)
scatterplot3d(x=out[,4],
y=out[,3],
z=out[,2],
type="l",
box=FALSE,
highlight.3d=TRUE,
color = "yellow",
axis =F,
xlab="",
ylab="",
zlab="",
angle =0,
main="",
grid=F,
lwd=4)
parameters <- c(a = -7/3,b = -5,c = 40)
state <- c(X = 2,Y = 3,Z = 5)
Lorenz<-function(t, state, parameters) {
with(as.list(c(state, parameters)),{
# rate of change
dX <- a*X + Y*Z
dY <- b * (Y-Z)
dZ <- -X*Y + c*Y - Z# return the rate of change
list(c(dX, dY, dZ))
}) # end with(as.list ...
}
times <- seq(0, 12, by = 0.001)
library(deSolve)
out <- ode(y = state, times = times, func = Lorenz, parms = parameters)
head(out)
scatterplot3d(x=out[,4],
y=out[,3],
z=out[,2],
type="l",
box=FALSE,
highlight.3d=TRUE,
color = "yellow",
axis =F,
xlab="",
ylab="",
zlab="",
angle =0,
main="",
grid=F,
lwd=4)
scatterplot3d(x=out[,4],
y=out[,3],
z=out[,2],
type="l",
box=FALSE,
highlight.3d=TRUE,
color = "yellow",
axis =F,
xlab="",
ylab="",
zlab="",
angle =0,
main="",
grid=F,
lwd=3)
scatterplot3d(x=out[,4],
y=out[,3],
z=out[,2],
type="l",
box=FALSE,
highlight.3d=TRUE,
color = "yellow",
axis =F,
xlab="",
ylab="",
zlab="",
angle =0,
main="",
grid=F,
lwd=2)
path <- "/Users/Evan/Desktop/test.csv"
df <- read.csv(path,header=TRUE)
path <- "/Users/Evan/Desktop/test.csv.txt"
df <- read.csv(path,header=TRUE)
foo <- data.frame(do.call('rbind', strsplit(as.character(df$FILENAME),'_',fixed=TRUE)))
foo
addfoo<- transform(foo, YEAR = substr(X2, 1, 4), MONTH = substr(X2, 5, 6), DAY = substr(X2, 7,8), HOUR = substr(X3, 1,2))
colnames(addfoo)[1] <- "RECORDER"
foo<- cbind(addfoo,df)
foo
head(foo)
path <- "/Users/Evan/Desktop/test.csv.txt"
df <- read.csv(path,header=TRUE)
newData <- data.frame(do.call('rbind', strsplit(as.character(df$FILENAME),'_',fixed=TRUE)))
newData
addnewData<- transform(newData, YEAR = substr(X2, 1, 4), MONTH = substr(X2, 5, 6), DAY = substr(X2, 7,8), HOUR = substr(X3, 1,2))
colnames(addnewData)[1] <- "RECORDER"
newData<- cbind(addnewData,df)
newData
head(newData)
plot(newData$HOUR,newData$LEFT_CHANNEL)
plot(newData$MONTH, newData$RIGHT_CHANNEL)
plot(newData$DAY, newData$RIGHT_CHANNEL)
paste0(newData$HOUR,'/', newData$DAY,'/',newData$MONTH,'/', newData$YEAR)
paste0(newData$HOUR,':', newData$DAY,'/',newData$MONTH,'/', newData$YEAR)
as.Date(paste0(newData$HOUR,':', newData$DAY,'/',newData$MONTH,'/', newData$YEAR),format='%h:%d/%m/%Y' )
as.Date(paste0( newData$DAY,'/',newData$MONTH,'/', newData$YEAR),format='%d/%m/%Y' )
install.packages("chron")
library(chron)
as.Date(paste0(newData$HOUR,':', newData$DAY,'/',newData$MONTH,'/', newData$YEAR),format='%d/%m/%Y' )
chron(paste0(newData$HOUR,':', newData$DAY,'/',newData$MONTH,'/', newData$YEAR),format='h:%d/%m/%Y' )
chron(paste0(newData$HOUR,':', newData$DAY,'/',newData$MONTH,'/', newData$YEAR),format='%h:%d/%m/%Y' )
as.POSIXlt(paste0(, newData$DAY,'/',newData$MONTH,'/', newData$YEAR, " ", newData$HOUR,':', "00:00"") )
#look at all of the data
newData
#we can look at just the first few entries of the data with
head(newData)
#we can graph the data by hour
plot(newData$HOUR,newData$LEFT_CHANNEL)
#or by day
plot(newData$DAY, newData$RIGHT_CHANNEL)
# or over time with a point a each hour
#and we can get fancy with the ggplot2 package as well
as.POSIXlt(paste0(, newData$DAY,'/',newData$MONTH,'/', newData$YEAR, " ", newData$HOUR,':', "00:00") )
as.POSIXlt(paste0(, newData$DAY,'/',newData$MONTH,'/', newData$YEAR, " ", newData$HOUR,':', "00:00") )
as.POSIXlt(paste0( newData$DAY,'/',newData$MONTH,'/', newData$YEAR, " ", newData$HOUR,':', "00:00") )
as.POSIXlt(paste0( newData$DAY,'/',newData$MONTH,'/', newData$YEAR, " ", newData$HOUR,':', "00:00 EST") )
as.POSIXlt(paste0( newData$YEAR,'/',newData$MONTH,'/', newData$DAY, " ", newData$HOUR,':', "00:00 EST") )
DATE<- as.POSIXlt(paste0( newData$YEAR,'/',newData$MONTH,'/', newData$DAY, " ", newData$HOUR,':', "00:00 EST") )
finalData<-cbind(DATE, newData)
head(finalData)
plot(finalData$DATE, newData$RIGHT_CHANNEL)
#path to the data file
path <- "/Users/Evan/Desktop/test.csv.txt"
#read in the data file
df <- read.csv(path,header=TRUE)
#transform the name of the file into different columns
newData <- data.frame(do.call('rbind', strsplit(as.character(df$FILENAME),'_',fixed=TRUE)))
addnewData<- transform(newData, YEAR = substr(X2, 1, 4), MONTH = substr(X2, 5, 6), DAY = substr(X2, 7,8), HOUR = substr(X3, 1,2))
colnames(addnewData)[1] <- "RECORDER"
newData<- cbind(addnewData,df)
#merge month, day, and hour into a time formated column
DATE<- as.POSIXlt(paste0( newData$YEAR,'/',newData$MONTH,'/', newData$DAY, " ", newData$HOUR,':', "00:00 EST") )
finalData<-cbind(DATE, newData)
#look at all of the data
finalData
#we can look at just the first few entries of the data with
head(finalData)
#we can graph the data by hour
plot(finalData$HOUR,newData$LEFT_CHANNEL)
#or by day
plot(finalData$DAY, newData$RIGHT_CHANNEL)
# or over time with a point a each hour
plot(finalData$DATE, newData$RIGHT_CHANNEL)
#and we can get fancy with the ggplot2 package as well
plot(finalData$DAY, newData$RIGHT_CHANNEL)
plot(finalData$HOUR,newData$LEFT_CHANNEL)
plot(finalData$DATE, newData$RIGHT_CHANNEL)
install.packages("ggplot2")
library(ggplot2)
ggplot(finalData, aes(x=finalData$DATE, y=finalData$LEFT_CHANNEL)) + geom_point()
ggplot(finalData, aes(x=finalData$DATE, y=finalData$LEFT_CHANNEL)) + geom_point() + theme_bw()
ggplot(finalData, aes(x=finalData$DATE, y=finalData$LEFT_CHANNEL, col=finalData$RECORDER)) + geom_point() + theme_bw()
head(finalData)
ggplot(finalData, aes(x=finalData$DATE, y=finalData$LEFT_CHANNEL, col=finalData$RECORDER)) +
geom_point() + geom_smooth() +  theme_bw()
ggplot(finalData, aes(x=finalData$DATE, y=finalData$LEFT_CHANNEL, col=finalData$RECORDER)) +
geom_point() + geom_smooth('y~x') +  theme_bw()
ggplot(finalData, aes(x=finalData$DATE, y=finalData$LEFT_CHANNEL, col=finalData$RECORDER)) +
geom_point() + geom_smooth('y~x') +  theme_bw()
ggplot(finalData, aes(x=finalData$DATE, y=finalData$LEFT_CHANNEL, col=finalData$RECORDER)) +
geom_point() + geom_smooth(method='lm',formula=y~x) +  theme_bw()
ggplot(finalData, aes(x=finalData$DATE, y=finalData$LEFT_CHANNEL, col=finalData$RECORDER)) +
geom_point() + geom_smooth(method='lm',formula=y~x) +  theme_bw() +
labs(x="Time", y="Right Channel", title="Title", legend="Recorder")
ggplot(finalData, aes(x=finalData$DATE, y=finalData$LEFT_CHANNEL, col=finalData$RECORDER)) +
geom_point() + geom_smooth(method='lm',formula=y~x) +  theme_bw() +
labs(x="Time", y="Right Channel", title="Title", col="Recorder")
#path to the data file
path <- "/Users/Evan/Desktop/test.csv.txt"
#read in the data file
df <- read.csv(path,header=TRUE)
#transform the name of the file into different columns
newData <- data.frame(do.call('rbind', strsplit(as.character(df$FILENAME),'_',fixed=TRUE)))
addnewData<- transform(newData, YEAR = substr(X2, 1, 4), MONTH = substr(X2, 5, 6), DAY = substr(X2, 7,8), HOUR = substr(X3, 1,2))
colnames(addnewData)[1] <- "RECORDER"
newData<- cbind(addnewData,df)
#merge month, day, and hour into a time formated column
DATE<- as.POSIXlt(paste0( newData$YEAR,'/',newData$MONTH,'/', newData$DAY, " ", newData$HOUR,':', "00:00 EST") )
finalData<-cbind(DATE, newData)
#look at all of the data
finalData
#we can look at just the first few entries of the data with
head(finalData)
#we can graph the data by hour
plot(finalData$HOUR,newData$LEFT_CHANNEL)
#or by day
plot(finalData$DAY, newData$RIGHT_CHANNEL)
# or over time with a point a each hour
plot(finalData$DATE, newData$RIGHT_CHANNEL)
#and we can get fancy with the ggplot2 package as well
#this needs to be run once --> install.packages("ggplot2")
library(ggplot2)
ggplot(finalData, aes(x=finalData$DATE, y=finalData$LEFT_CHANNEL, col=finalData$RECORDER)) +
geom_point() + geom_smooth(method='lm',formula=y~x) +  theme_bw() +
labs(x="Time", y="Right Channel", title="Title", col="Recorder")
source('multiple sound files soundecology edit.R')
#parameters
soundindex<- "ndsi"
no_cores<- 2
res<-"C:/Users/evan/Desktop/testdata.csv"
logfile <- "C:/Users/evan/Desktop/logfile.csv" # i think that this file will be appended to, so make sure it is empty.
filesToAnalyze <- "C:/Users/evan/Desktop/filenames.txt"
lengthSec <-3480 # seconds in 60 minutes but not all samples are exactly 60 minutes
sampleLengthSec <-30 # 30 seconds analysis lengths
amountOfSample <-116 # there are 120, 30 seconds in 60 minutes
#Start of code that is not parameters
#reading in the file paths from a csv
fileTable <- read.csv(filesToAnalyze, header=F, stringsAsFactors=FALSE)
fileNames <- fileTable$V1
totalNumberOfFiles <- length(fileNames)
directoryArr <- rep("default String", totalNumberOfFiles*amountOfSample)
fromArr <- rep(-lengthSec, totalNumberOfFiles*amountOfSample)
wave_FilesArr <- rep("default String", totalNumberOfFiles*amountOfSample)
count<-0
for (num in 1:length(fileNames))
{
for (i in 1:amountOfSample)
{
count <- count +1
directoryArr[count] <- fileNames[num]
fromArr[count] <-  30 * ((count-1)%% amountOfSample)
}
}
#create toArr based off of fromArray
toArr<- fromArr + rep(sampleLengthSec, length(fromArr))
#gets wav file names based off of path from directoryArr
for (i in 1:length(directoryArr)){
pos <- unlist(gregexpr(pattern ='/',directoryArr[i]))
wave_FilesArr[i] <- substr(as.character(directoryArr[i]), pos[length(pos)]+1, nchar(directoryArr[i]))
}
library(soundecology)
multiple_sounds_EditforLS(directoryArr = directoryArr, wave_FilesArr = wave_FilesArr, resultfile = res, soundindex = soundindex ,no_cores = no_cores, from = fromArr, to = toArr, units = "seconds", anthro_min = 1000, anthro_max = 2000, bio_min = 2000, bio_max = 11000)
getwd()
setwd(../Desktop/sse)
setwd("../Desktop/sse")
setwd("../Desktop/sse")
getwd()
source('multiple sound files soundecology edit.R')
#parameters
soundindex<- "ndsi"
no_cores<- 2
res<-"C:/Users/evan/Desktop/testdata.csv"
logfile <- "C:/Users/evan/Desktop/logfile.csv" # i think that this file will be appended to, so make sure it is empty.
filesToAnalyze <- "C:/Users/evan/Desktop/filenames.txt"
lengthSec <-3480 # seconds in 60 minutes but not all samples are exactly 60 minutes
sampleLengthSec <-30 # 30 seconds analysis lengths
amountOfSample <-116 # there are 120, 30 seconds in 60 minutes
#Start of code that is not parameters
#reading in the file paths from a csv
fileTable <- read.csv(filesToAnalyze, header=F, stringsAsFactors=FALSE)
fileNames <- fileTable$V1
totalNumberOfFiles <- length(fileNames)
directoryArr <- rep("default String", totalNumberOfFiles*amountOfSample)
fromArr <- rep(-lengthSec, totalNumberOfFiles*amountOfSample)
wave_FilesArr <- rep("default String", totalNumberOfFiles*amountOfSample)
count<-0
for (num in 1:length(fileNames))
{
for (i in 1:amountOfSample)
{
count <- count +1
directoryArr[count] <- fileNames[num]
fromArr[count] <-  30 * ((count-1)%% amountOfSample)
}
}
#create toArr based off of fromArray
toArr<- fromArr + rep(sampleLengthSec, length(fromArr))
#gets wav file names based off of path from directoryArr
for (i in 1:length(directoryArr)){
pos <- unlist(gregexpr(pattern ='/',directoryArr[i]))
wave_FilesArr[i] <- substr(as.character(directoryArr[i]), pos[length(pos)]+1, nchar(directoryArr[i]))
}
library(soundecology)
multiple_sounds_EditforLS(directoryArr = directoryArr, wave_FilesArr = wave_FilesArr, resultfile = res, soundindex = soundindex ,no_cores = no_cores, from = fromArr, to = toArr, units = "seconds", anthro_min = 1000, anthro_max = 2000, bio_min = 2000, bio_max = 11000)
getwd()
list.files()
source('multiple sound files soundecology edit.R')
logfile
logfile<= ""
logfile<- ""
logfile
(logfile=="")
(logfile=="")
logfile<- "adsf"
(logfile=="")
source('multiple sound files soundecology edit.R')
#parameters
soundindex<- "ndsi"
no_cores<- 2
res<-"C:/Users/evan/Desktop/testdata.csv"
logfile <- "C:/Users/evan/Desktop/logfile.csv" # i think that this file will be appended to, so make sure it is empty.
filesToAnalyze <- "C:/Users/evan/Desktop/filenames.txt"
lengthSec <-3480 # seconds in 60 minutes but not all samples are exactly 60 minutes
sampleLengthSec <-30 # 30 seconds analysis lengths
amountOfSample <-116 # there are 120, 30 seconds in 60 minutes
#Start of code that is not parameters
#reading in the file paths from a csv
fileTable <- read.csv(filesToAnalyze, header=F, stringsAsFactors=FALSE)
fileNames <- fileTable$V1
totalNumberOfFiles <- length(fileNames)
directoryArr <- rep("default String", totalNumberOfFiles*amountOfSample)
fromArr <- rep(-lengthSec, totalNumberOfFiles*amountOfSample)
wave_FilesArr <- rep("default String", totalNumberOfFiles*amountOfSample)
count<-0
for (num in 1:length(fileNames))
{
for (i in 1:amountOfSample)
{
count <- count +1
directoryArr[count] <- fileNames[num]
fromArr[count] <-  30 * ((count-1)%% amountOfSample)
}
}
#create toArr based off of fromArray
toArr<- fromArr + rep(sampleLengthSec, length(fromArr))
#gets wav file names based off of path from directoryArr
for (i in 1:length(directoryArr)){
pos <- unlist(gregexpr(pattern ='/',directoryArr[i]))
wave_FilesArr[i] <- substr(as.character(directoryArr[i]), pos[length(pos)]+1, nchar(directoryArr[i]))
}
library(soundecology)
multiple_sounds_EditforLS(directoryArr = directoryArr, wave_FilesArr = wave_FilesArr, resultfile = res, soundindex = soundindex ,no_cores = no_cores, from = fromArr, to = toArr, units = "seconds", anthro_min = 1000, anthro_max = 2000, bio_min = 2000, bio_max = 11000)
source('multiple sound files soundecology edit.R')
#parameters
soundindex<- "ndsi"
no_cores<- 2
res<-"C:/Users/evan/Desktop/testdata.csv"
logfile <- "C:/Users/evan/Desktop/logfile.csv" # i think that this file will be appended to, so make sure it is empty.
filesToAnalyze <- "C:/Users/evan/Desktop/filenames.txt"
lengthSec <-3480 # seconds in 60 minutes but not all samples are exactly 60 minutes
sampleLengthSec <-30 # 30 seconds analysis lengths
amountOfSample <-116 # there are 120, 30 seconds in 60 minutes
#Start of code that is not parameters
#reading in the file paths from a csv
fileTable <- read.csv(filesToAnalyze, header=F, stringsAsFactors=FALSE)
fileNames <- fileTable$V1
totalNumberOfFiles <- length(fileNames)
directoryArr <- rep("default String", totalNumberOfFiles*amountOfSample)
fromArr <- rep(-lengthSec, totalNumberOfFiles*amountOfSample)
wave_FilesArr <- rep("default String", totalNumberOfFiles*amountOfSample)
count<-0
for (num in 1:length(fileNames))
{
for (i in 1:amountOfSample)
{
count <- count +1
directoryArr[count] <- fileNames[num]
fromArr[count] <-  30 * ((count-1)%% amountOfSample)
}
}
#create toArr based off of fromArray
toArr<- fromArr + rep(sampleLengthSec, length(fromArr))
#gets wav file names based off of path from directoryArr
for (i in 1:length(directoryArr)){
pos <- unlist(gregexpr(pattern ='/',directoryArr[i]))
wave_FilesArr[i] <- substr(as.character(directoryArr[i]), pos[length(pos)]+1, nchar(directoryArr[i]))
}
library(soundecology)
multiple_sounds_EditforLS(directoryArr = directoryArr, wave_FilesArr = wave_FilesArr, resultfile = res, soundindex = soundindex ,no_cores = no_cores, from = fromArr, to = toArr, units = "seconds", anthro_min = 1000, anthro_max = 2000, bio_min = 2000, bio_max = 11000, logfile = logfile)
1139/60
source('multiple sound files soundecology edit.R')
#parameters
soundindex<- "ndsi"
no_cores<- 2
res<-"C:/Users/evan/Desktop/testdata.csv"
logfile <- "C:/Users/evan/Desktop/logfile.csv" # i think that this file will be appended to, so make sure it is empty.
filesToAnalyze <- "C:/Users/evan/Desktop/filenames.txt"
lengthSec <-3480 # seconds in 60 minutes but not all samples are exactly 60 minutes
sampleLengthSec <-30 # 30 seconds analysis lengths
amountOfSample <-116 # there are 120, 30 seconds in 60 minutes
#Start of code that is not parameters
#reading in the file paths from a csv
fileTable <- read.csv(filesToAnalyze, header=F, stringsAsFactors=FALSE)
fileNames <- fileTable$V1
totalNumberOfFiles <- length(fileNames)
directoryArr <- rep("default String", totalNumberOfFiles*amountOfSample)
fromArr <- rep(-lengthSec, totalNumberOfFiles*amountOfSample)
wave_FilesArr <- rep("default String", totalNumberOfFiles*amountOfSample)
count<-0
for (num in 1:length(fileNames))
{
for (i in 1:amountOfSample)
{
count <- count +1
directoryArr[count] <- fileNames[num]
fromArr[count] <-  30 * ((count-1)%% amountOfSample)
}
}
#create toArr based off of fromArray
toArr<- fromArr + rep(sampleLengthSec, length(fromArr))
#gets wav file names based off of path from directoryArr
for (i in 1:length(directoryArr)){
pos <- unlist(gregexpr(pattern ='/',directoryArr[i]))
wave_FilesArr[i] <- substr(as.character(directoryArr[i]), pos[length(pos)]+1, nchar(directoryArr[i]))
}
library(soundecology)
multiple_sounds_EditforLS(directoryArr = directoryArr, wave_FilesArr = wave_FilesArr, resultfile = res, soundindex = soundindex ,no_cores = no_cores, from = fromArr, to = toArr, units = "seconds", anthro_min = 1000, anthro_max = 2000, bio_min = 2000, bio_max = 11000, logfile = logfile)
logfilepath<-"C:/Users/evan/Desktop/logfile1.csv"
logfilepath<-"C:/Users/evan/Desktop/logfile.csv"
log<- read.csv(logfilepath)
tail(log)
grepl("[1]", log)
grep("[1]", log)
grep("[1]", log$starting.worker.pid.11424.on.localhost.11953.at.15.00.48.760,value=T, fixed = T)
695/2
log<- read.csv(logfilepath, header = F)
log<- read.csv(logfilepath, quote = "" ,header = F)
log
help("read.csv")
log<- read.csv(logfilepath, quote = "" ,header = F, sep="\n")
head(log)
head(log, n=20 )
grep("[1]", log$starting.worker.pid.11424.on.localhost.11953.at.15.00.48.760,value=T, fixed = T)
colnames(log)
grep("[1]", log$V!,value=T, fixed = T)
grep("[1]", log$V1,value=T, fixed = T)
logcl<- substr(grep("[1]", log$V1,value=T, fixed = T), 13, nchar(a$data)-3)
ll<- grep("[1]", log$V1,value=T, fixed = T)
logcl<- substr(ll, 13, nchar(ll$data)-3)
logcl<- substr(ll, 13, nchar(ll)-3)
logcl
logcl<- substr(ll, 7, nchar(ll)-3)
head(logcl)
logcl<- substr(ll, 6, nchar(ll)-3)
head(logcl)
head(ll)
logcl<- substr(ll, 6, nchar(ll)-1)
head(logcl)
finalLog<- grep("FILENAME,SAMPLINGRATE", logcl,value = T, fixed = T)
head(finalLog)
finalLog<- grep("FILENAME,SAMPLINGRATE", logcl,value = F, fixed = T)
head(finalLog)
finalLog<- finalLog+1
finalLog <- c(1,finalLog)
finalLog
logcl[finalLog]
head(logcl[finalLog])
source("logfileUtils.R")
source("logfileUtils.R")
convertLogFile(logfile)
write.csv(convertLogFile(logfile) , res)
write.csv(convertLogFile(logfile) , "dataFile.csv")
getwd()
write.csv(convertLogFile(logfile) , "dataFile.csv", header=F)
help("write.csv")
write.csv(convertLogFile(logfile) , "dataFile.csv", row.names = F, col.names = F)
write.csv(convertLogFile(logfile) , "dataFile.csv", row.names = F)
write.csv(convertLogFile(logfile) , "dataFile.csv", row.names = F, col.names = F)
write.table(convertLogFile(logfile) , "dataFile.csv", row.names = F, col.names = F)
write.table(convertLogFile(logfile) , "dataFile.txt", row.names = F, col.names = F)
logData<- convertLogFile(logfile)
logData
newData <- data.frame(do.call('rbind', strsplit(as.character(logData),',',fixed=TRUE)))
newData
colnames(newData)<- newData[1]
head(newData)
newData[1]
newData[,1]
newData[1,]
colnames(newData)<- newData[1,]
head(newData)
newData[1,]
colnames(newData)<- as.character(unlist(newData[1,]))
head(newData)
newData <- newData[-1 ,]
head(newData)
write.table(convertLogFile(logfile) , "dataFile.csv", row.names = F, col.names = F)
write.table(convertLogFile(logfile) , "dataFile.csv", row.names = F, col.names = T)
write.table(newData , "dataFile.csv", row.names = F, col.names = T)
write.table(newData , "dataFile.csv", row.names = F, col.names = T, quote=F)
head(newData)
write.csv(newData , "dataFile.csv", row.names = F, col.names = T, quote=F)
write.csv(newData , "dataFile.csv", row.names = F, col.names = T, quote=F)
write.table(newData , "dataFile.csv", row.names = F, quote=F)
#you should be able to recover the partital data from the logfile with the following
source("logfileUtils.R")
logData<- convertLogFile(logfile)
newData <- data.frame(do.call('rbind', strsplit(as.character(logData),',',fixed=TRUE)))
colnames(newData)<- as.character(unlist(newData[1,]))
newData <- newData[-1 ,]
head(newData)
write.table(newData , "dataFile.csv", row.names = F, quote=F)
source("logfileUtils.R")
logData<- convertLogFile(logfile)
logfile <- "C:/Users/evan/Desktop/logfile.csv" # i think that this file will be appended to, so make sure it is empty.
logData<- convertLogFile(logfile)
newData <- data.frame(do.call('rbind', strsplit(as.character(logData),',',fixed=TRUE)))
colnames(newData)<- as.character(unlist(newData[1,]))
newData <- newData[-1 ,]
head(newData)
write.table(newData , "dataFile.csv", row.names = F, quote=F)
